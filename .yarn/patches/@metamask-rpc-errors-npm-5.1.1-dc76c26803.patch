diff --git a/dist/classes.d.ts b/dist/classes.d.ts
index 46c2ef8eb999c0063594277974b29c8f239a6dcb..d9befc615d70c27607854fcb5b6dc595c1be226f 100644
--- a/dist/classes.d.ts
+++ b/dist/classes.d.ts
@@ -1,5 +1,5 @@
 import { JsonRpcError as SerializedJsonRpcError } from '@metamask/utils';
-import { DataWithOptionalCause } from './utils';
+import type { OptionalDataWithOptionalCause } from './utils';
 export type { SerializedJsonRpcError };
 /**
  * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors
@@ -7,7 +7,7 @@ export type { SerializedJsonRpcError };
  *
  * Permits any integer error code.
  */
-export declare class JsonRpcError<T extends DataWithOptionalCause> extends Error {
+export declare class JsonRpcError<T extends OptionalDataWithOptionalCause> extends Error {
     code: number;
     data?: T;
     constructor(code: number, message: string, data?: T);
@@ -29,7 +29,7 @@ export declare class JsonRpcError<T extends DataWithOptionalCause> extends Error
  * Error subclass implementing Ethereum Provider errors per EIP-1193.
  * Permits integer error codes in the [ 1000 <= 4999 ] range.
  */
-export declare class EthereumProviderError<T extends DataWithOptionalCause> extends JsonRpcError<T> {
+export declare class EthereumProviderError<T extends OptionalDataWithOptionalCause> extends JsonRpcError<T> {
     /**
      * Create an Ethereum Provider JSON-RPC error.
      *
diff --git a/dist/classes.js.map b/dist/classes.js.map
index 3ec85fd22f21a45e7537436251feb70f8156e585..574d6c312ac289cd4c22291a0d9c1d17123e44c4 100644
--- a/dist/classes.js.map
+++ b/dist/classes.js.map
@@ -1 +1 @@
-{"version":3,"file":"classes.js","sourceRoot":"","sources":["../src/classes.ts"],"names":[],"mappings":";;;;;;AAAA,2CAIyB;AACzB,8EAAgD;AAEhD,mCAAgE;AAIhE;;;;;GAKG;AACH,MAAa,YAA8C,SAAQ,KAAK;IAKtE,YAAY,IAAY,EAAE,OAAe,EAAE,IAAQ;QACjD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QAED,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SAClB;IACH,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,MAAM,UAAU,GAA2B;YACzC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,0EAA0E;YAC1E,qEAAqE;YACrE,2BAA2B;YAC3B,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAA+B,CAAC;YAEvD,IAAI,IAAA,qBAAa,EAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5B,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,IAAA,sBAAc,EAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzD;SACF;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SAC/B;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,IAAA,6BAAa,EAAC,IAAI,CAAC,SAAS,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;CACF;AA3DD,oCA2DC;AAED;;;GAGG;AACH,MAAa,qBAEX,SAAQ,YAAe;IACvB;;;;;;;OAOG;IACH,YAAY,IAAY,EAAE,OAAe,EAAE,IAAQ;QACjD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;SACH;QAED,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC;CACF;AApBD,sDAoBC;AAED;;;;;GAKG;AACH,SAAS,sBAAsB,CAAC,IAAY;IAC1C,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAChE,CAAC;AAED;;;;;;GAMG;AACH,SAAS,iBAAiB,CAAC,CAAU,EAAE,KAAc;IACnD,IAAI,KAAK,KAAK,YAAY,EAAE;QAC1B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import {\n  isPlainObject,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n} from '@metamask/utils';\nimport safeStringify from 'fast-safe-stringify';\n\nimport { DataWithOptionalCause, serializeCause } from './utils';\n\nexport type { SerializedJsonRpcError };\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nexport class JsonRpcError<T extends DataWithOptionalCause> extends Error {\n  public code: number;\n\n  public data?: T;\n\n  constructor(code: number, message: string, data?: T) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize(): SerializedJsonRpcError {\n    const serialized: SerializedJsonRpcError = {\n      code: this.code,\n      message: this.message,\n    };\n\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data as { [key: string]: Json };\n\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n\n    return serialized;\n  }\n\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString(): string {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nexport class EthereumProviderError<\n  T extends DataWithOptionalCause,\n> extends JsonRpcError<T> {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code: number, message: string, data?: T) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999',\n      );\n    }\n\n    super(code, message, data);\n  }\n}\n\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code: number): boolean {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_: unknown, value: unknown): unknown {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"classes.js","sourceRoot":"","sources":["../src/classes.ts"],"names":[],"mappings":";;;;;;AAAA,2CAIyB;AACzB,8EAAgD;AAGhD,mCAAyC;AAIzC;;;;;GAKG;AACH,MAAa,YAEX,SAAQ,KAAK;IAKb,YAAY,IAAY,EAAE,OAAe,EAAE,IAAQ;QACjD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;SAC/C;QAED,IAAI,CAAC,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;YAC3C,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;SAC1D;QAED,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SAClB;IACH,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,MAAM,UAAU,GAA2B;YACzC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC;QAEF,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,0EAA0E;YAC1E,qEAAqE;YACrE,2BAA2B;YAC3B,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAA+B,CAAC;YAEvD,IAAI,IAAA,qBAAa,EAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBAC5B,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,IAAA,sBAAc,EAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzD;SACF;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;SAC/B;QAED,OAAO,UAAU,CAAC;IACpB,CAAC;IAED;;;;;OAKG;IACH,QAAQ;QACN,OAAO,IAAA,6BAAa,EAAC,IAAI,CAAC,SAAS,EAAE,EAAE,iBAAiB,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;CACF;AA7DD,oCA6DC;AAED;;;GAGG;AACH,MAAa,qBAEX,SAAQ,YAAe;IACvB;;;;;;;OAOG;IACH,YAAY,IAAY,EAAE,OAAe,EAAE,IAAQ;QACjD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE;YACjC,MAAM,IAAI,KAAK,CACb,2DAA2D,CAC5D,CAAC;SACH;QAED,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAC7B,CAAC;CACF;AApBD,sDAoBC;AAED;;;;;GAKG;AACH,SAAS,sBAAsB,CAAC,IAAY;IAC1C,OAAO,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AAChE,CAAC;AAED;;;;;;GAMG;AACH,SAAS,iBAAiB,CAAC,CAAU,EAAE,KAAc;IACnD,IAAI,KAAK,KAAK,YAAY,EAAE;QAC1B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import {\n  isPlainObject,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n} from '@metamask/utils';\nimport safeStringify from 'fast-safe-stringify';\n\nimport type { OptionalDataWithOptionalCause } from './utils';\nimport { serializeCause } from './utils';\n\nexport type { SerializedJsonRpcError };\n\n/**\n * Error subclass implementing JSON RPC 2.0 errors and Ethereum RPC errors\n * per EIP-1474.\n *\n * Permits any integer error code.\n */\nexport class JsonRpcError<\n  T extends OptionalDataWithOptionalCause,\n> extends Error {\n  public code: number;\n\n  public data?: T;\n\n  constructor(code: number, message: string, data?: T) {\n    if (!Number.isInteger(code)) {\n      throw new Error('\"code\" must be an integer.');\n    }\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a non-empty string.');\n    }\n\n    super(message);\n    this.code = code;\n    if (data !== undefined) {\n      this.data = data;\n    }\n  }\n\n  /**\n   * Get the error as JSON-serializable object.\n   *\n   * @returns A plain object with all public class properties.\n   */\n  serialize(): SerializedJsonRpcError {\n    const serialized: SerializedJsonRpcError = {\n      code: this.code,\n      message: this.message,\n    };\n\n    if (this.data !== undefined) {\n      // `this.data` is not guaranteed to be a plain object, but this simplifies\n      // the type guard below. We can safely cast it because we know it's a\n      // JSON-serializable value.\n      serialized.data = this.data as { [key: string]: Json };\n\n      if (isPlainObject(this.data)) {\n        serialized.data.cause = serializeCause(this.data.cause);\n      }\n    }\n\n    if (this.stack) {\n      serialized.stack = this.stack;\n    }\n\n    return serialized;\n  }\n\n  /**\n   * Get a string representation of the serialized error, omitting any circular\n   * references.\n   *\n   * @returns A string representation of the serialized error.\n   */\n  toString(): string {\n    return safeStringify(this.serialize(), stringifyReplacer, 2);\n  }\n}\n\n/**\n * Error subclass implementing Ethereum Provider errors per EIP-1193.\n * Permits integer error codes in the [ 1000 <= 4999 ] range.\n */\nexport class EthereumProviderError<\n  T extends OptionalDataWithOptionalCause,\n> extends JsonRpcError<T> {\n  /**\n   * Create an Ethereum Provider JSON-RPC error.\n   *\n   * @param code - The JSON-RPC error code. Must be an integer in the\n   * `1000 <= n <= 4999` range.\n   * @param message - The JSON-RPC error message.\n   * @param data - Optional data to include in the error.\n   */\n  constructor(code: number, message: string, data?: T) {\n    if (!isValidEthProviderCode(code)) {\n      throw new Error(\n        '\"code\" must be an integer such that: 1000 <= code <= 4999',\n      );\n    }\n\n    super(code, message, data);\n  }\n}\n\n/**\n * Check if the given code is a valid JSON-RPC error code.\n *\n * @param code - The code to check.\n * @returns Whether the code is valid.\n */\nfunction isValidEthProviderCode(code: number): boolean {\n  return Number.isInteger(code) && code >= 1000 && code <= 4999;\n}\n\n/**\n * A JSON replacer function that omits circular references.\n *\n * @param _ - The key being replaced.\n * @param value - The value being replaced.\n * @returns The value to use in place of the original value.\n */\nfunction stringifyReplacer(_: unknown, value: unknown): unknown {\n  if (value === '[Circular]') {\n    return undefined;\n  }\n\n  return value;\n}\n"]}
\ No newline at end of file
diff --git a/dist/errors.d.ts b/dist/errors.d.ts
index b4653125ce748f7da32ced278cc60f726c3cb6ee..cbe8abece705fcf13e977e9d107f23f55a18064d 100644
--- a/dist/errors.d.ts
+++ b/dist/errors.d.ts
@@ -1,14 +1,14 @@
 import { JsonRpcError, EthereumProviderError } from './classes';
-import { DataWithOptionalCause } from './utils';
-type EthereumErrorOptions<T extends DataWithOptionalCause> = {
+import { OptionalDataWithOptionalCause } from './utils';
+type EthereumErrorOptions<T extends OptionalDataWithOptionalCause> = {
     message?: string;
     data?: T;
 };
-type ServerErrorOptions<T extends DataWithOptionalCause> = {
+type ServerErrorOptions<T extends OptionalDataWithOptionalCause> = {
     code: number;
 } & EthereumErrorOptions<T>;
-type CustomErrorArg<T extends DataWithOptionalCause> = ServerErrorOptions<T>;
-type JsonRpcErrorsArg<T extends DataWithOptionalCause> = EthereumErrorOptions<T> | string;
+type CustomErrorArg<T extends OptionalDataWithOptionalCause> = ServerErrorOptions<T>;
+type JsonRpcErrorsArg<T extends OptionalDataWithOptionalCause> = EthereumErrorOptions<T> | string;
 export declare const rpcErrors: {
     /**
      * Get a JSON RPC 2.0 Parse (-32700) error.
@@ -16,35 +16,35 @@ export declare const rpcErrors: {
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    parse: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T> | undefined) => JsonRpcError<T>;
+    parse: <T extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T> | undefined) => JsonRpcError<T>;
     /**
      * Get a JSON RPC 2.0 Invalid Request (-32600) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    invalidRequest: <T_1 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_1> | undefined) => JsonRpcError<T_1>;
+    invalidRequest: <T_1 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_1> | undefined) => JsonRpcError<T_1>;
     /**
      * Get a JSON RPC 2.0 Invalid Params (-32602) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    invalidParams: <T_2 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_2> | undefined) => JsonRpcError<T_2>;
+    invalidParams: <T_2 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_2> | undefined) => JsonRpcError<T_2>;
     /**
      * Get a JSON RPC 2.0 Method Not Found (-32601) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    methodNotFound: <T_3 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_3> | undefined) => JsonRpcError<T_3>;
+    methodNotFound: <T_3 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_3> | undefined) => JsonRpcError<T_3>;
     /**
      * Get a JSON RPC 2.0 Internal (-32603) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    internal: <T_4 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_4> | undefined) => JsonRpcError<T_4>;
+    internal: <T_4 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_4> | undefined) => JsonRpcError<T_4>;
     /**
      * Get a JSON RPC 2.0 Server error.
      * Permits integer error codes in the [ -32099 <= -32005 ] range.
@@ -53,49 +53,49 @@ export declare const rpcErrors: {
      * @param opts - The error options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    server: <T_5 extends DataWithOptionalCause>(opts: ServerErrorOptions<T_5>) => JsonRpcError<T_5>;
+    server: <T_5 extends OptionalDataWithOptionalCause>(opts: ServerErrorOptions<T_5>) => JsonRpcError<T_5>;
     /**
      * Get an Ethereum JSON RPC Invalid Input (-32000) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    invalidInput: <T_6 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_6> | undefined) => JsonRpcError<T_6>;
+    invalidInput: <T_6 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_6> | undefined) => JsonRpcError<T_6>;
     /**
      * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    resourceNotFound: <T_7 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_7> | undefined) => JsonRpcError<T_7>;
+    resourceNotFound: <T_7 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_7> | undefined) => JsonRpcError<T_7>;
     /**
      * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    resourceUnavailable: <T_8 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_8> | undefined) => JsonRpcError<T_8>;
+    resourceUnavailable: <T_8 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_8> | undefined) => JsonRpcError<T_8>;
     /**
      * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    transactionRejected: <T_9 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_9> | undefined) => JsonRpcError<T_9>;
+    transactionRejected: <T_9 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_9> | undefined) => JsonRpcError<T_9>;
     /**
      * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    methodNotSupported: <T_10 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_10> | undefined) => JsonRpcError<T_10>;
+    methodNotSupported: <T_10 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_10> | undefined) => JsonRpcError<T_10>;
     /**
      * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link JsonRpcError} class.
      */
-    limitExceeded: <T_11 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_11> | undefined) => JsonRpcError<T_11>;
+    limitExceeded: <T_11 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_11> | undefined) => JsonRpcError<T_11>;
 };
 export declare const providerErrors: {
     /**
@@ -104,41 +104,41 @@ export declare const providerErrors: {
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link EthereumProviderError} class.
      */
-    userRejectedRequest: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T> | undefined) => EthereumProviderError<T>;
+    userRejectedRequest: <T extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T> | undefined) => EthereumProviderError<T>;
     /**
      * Get an Ethereum Provider Unauthorized (4100) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link EthereumProviderError} class.
      */
-    unauthorized: <T_1 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_1> | undefined) => EthereumProviderError<T_1>;
+    unauthorized: <T_1 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_1> | undefined) => EthereumProviderError<T_1>;
     /**
      * Get an Ethereum Provider Unsupported Method (4200) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link EthereumProviderError} class.
      */
-    unsupportedMethod: <T_2 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_2> | undefined) => EthereumProviderError<T_2>;
+    unsupportedMethod: <T_2 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_2> | undefined) => EthereumProviderError<T_2>;
     /**
      * Get an Ethereum Provider Not Connected (4900) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link EthereumProviderError} class.
      */
-    disconnected: <T_3 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_3> | undefined) => EthereumProviderError<T_3>;
+    disconnected: <T_3 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_3> | undefined) => EthereumProviderError<T_3>;
     /**
      * Get an Ethereum Provider Chain Not Connected (4901) error.
      *
      * @param arg - The error message or options bag.
      * @returns An instance of the {@link EthereumProviderError} class.
      */
-    chainDisconnected: <T_4 extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_4> | undefined) => EthereumProviderError<T_4>;
+    chainDisconnected: <T_4 extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T_4> | undefined) => EthereumProviderError<T_4>;
     /**
      * Get a custom Ethereum Provider error.
      *
      * @param opts - The error options bag.
      * @returns An instance of the {@link EthereumProviderError} class.
      */
-    custom: <T_5 extends DataWithOptionalCause>(opts: CustomErrorArg<T_5>) => EthereumProviderError<T_5>;
+    custom: <T_5 extends OptionalDataWithOptionalCause>(opts: CustomErrorArg<T_5>) => EthereumProviderError<T_5>;
 };
 export {};
diff --git a/dist/errors.js.map b/dist/errors.js.map
index 3ce4a37cef2de53f217b1573224090813e727bc8..d542732ea1cb5a3f8c8569405ef545edab1ebc12 100644
--- a/dist/errors.js.map
+++ b/dist/errors.js.map
@@ -1 +1 @@
-{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonRpcError, EthereumProviderError } from './classes';\nimport { errorCodes } from './error-constants';\nimport { DataWithOptionalCause, getMessageFromCode } from './utils';\n\ntype EthereumErrorOptions<T extends DataWithOptionalCause> = {\n  message?: string;\n  data?: T;\n};\n\ntype ServerErrorOptions<T extends DataWithOptionalCause> = {\n  code: number;\n} & EthereumErrorOptions<T>;\n\ntype CustomErrorArg<T extends DataWithOptionalCause> = ServerErrorOptions<T>;\n\ntype JsonRpcErrorsArg<T extends DataWithOptionalCause> =\n  | EthereumErrorOptions<T>\n  | string;\n\nexport const rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.parse, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.internal, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: <T extends DataWithOptionalCause>(opts: ServerErrorOptions<T>) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum RPC Server errors must provide single object argument.',\n      );\n    }\n    const { code } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error(\n        '\"code\" must be an integer such that: -32099 <= code <= -32005',\n      );\n    }\n    return getJsonRpcError(code, opts);\n  },\n\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: <T extends DataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.limitExceeded, arg),\n};\n\nexport const providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: <T extends DataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: <T extends DataWithOptionalCause>(opts: CustomErrorArg<T>) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum Provider custom errors must provide single object argument.',\n      );\n    }\n\n    const { code, message, data } = opts;\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  },\n};\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError<T extends DataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): JsonRpcError<T> {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message ?? getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError<T extends DataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): EthereumProviderError<T> {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(\n    code,\n    message ?? getMessageFromCode(code),\n    data,\n  );\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts<T extends DataWithOptionalCause>(\n  arg?: JsonRpcErrorsArg<T>,\n): [message?: string | undefined, data?: T | undefined] {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const { message, data } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message ?? undefined, data];\n    }\n  }\n\n  return [];\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"errors.js","sourceRoot":"","sources":["../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import { JsonRpcError, EthereumProviderError } from './classes';\nimport { errorCodes } from './error-constants';\nimport { OptionalDataWithOptionalCause, getMessageFromCode } from './utils';\n\ntype EthereumErrorOptions<T extends OptionalDataWithOptionalCause> = {\n  message?: string;\n  data?: T;\n};\n\ntype ServerErrorOptions<T extends OptionalDataWithOptionalCause> = {\n  code: number;\n} & EthereumErrorOptions<T>;\n\ntype CustomErrorArg<T extends OptionalDataWithOptionalCause> =\n  ServerErrorOptions<T>;\n\ntype JsonRpcErrorsArg<T extends OptionalDataWithOptionalCause> =\n  | EthereumErrorOptions<T>\n  | string;\n\nexport const rpcErrors = {\n  /**\n   * Get a JSON RPC 2.0 Parse (-32700) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  parse: <T extends OptionalDataWithOptionalCause>(arg?: JsonRpcErrorsArg<T>) =>\n    getJsonRpcError(errorCodes.rpc.parse, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Request (-32600) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidRequest: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidRequest, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Invalid Params (-32602) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidParams: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidParams, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Method Not Found (-32601) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotFound: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotFound, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Internal (-32603) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  internal: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.internal, arg),\n\n  /**\n   * Get a JSON RPC 2.0 Server error.\n   * Permits integer error codes in the [ -32099 <= -32005 ] range.\n   * Codes -32000 through -32004 are reserved by EIP-1474.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  server: <T extends OptionalDataWithOptionalCause>(\n    opts: ServerErrorOptions<T>,\n  ) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum RPC Server errors must provide single object argument.',\n      );\n    }\n    const { code } = opts;\n    if (!Number.isInteger(code) || code > -32005 || code < -32099) {\n      throw new Error(\n        '\"code\" must be an integer such that: -32099 <= code <= -32005',\n      );\n    }\n    return getJsonRpcError(code, opts);\n  },\n\n  /**\n   * Get an Ethereum JSON RPC Invalid Input (-32000) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  invalidInput: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.invalidInput, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Not Found (-32001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceNotFound: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceNotFound, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  resourceUnavailable: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.resourceUnavailable, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  transactionRejected: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.transactionRejected, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Method Not Supported (-32004) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  methodNotSupported: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.methodNotSupported, arg),\n\n  /**\n   * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link JsonRpcError} class.\n   */\n  limitExceeded: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => getJsonRpcError(errorCodes.rpc.limitExceeded, arg),\n};\n\nexport const providerErrors = {\n  /**\n   * Get an Ethereum Provider User Rejected Request (4001) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  userRejectedRequest: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.userRejectedRequest, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unauthorized (4100) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unauthorized: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unauthorized, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Unsupported Method (4200) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  unsupportedMethod: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.unsupportedMethod, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Not Connected (4900) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  disconnected: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.disconnected, arg);\n  },\n\n  /**\n   * Get an Ethereum Provider Chain Not Connected (4901) error.\n   *\n   * @param arg - The error message or options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  chainDisconnected: <T extends OptionalDataWithOptionalCause>(\n    arg?: JsonRpcErrorsArg<T>,\n  ) => {\n    return getEthProviderError(errorCodes.provider.chainDisconnected, arg);\n  },\n\n  /**\n   * Get a custom Ethereum Provider error.\n   *\n   * @param opts - The error options bag.\n   * @returns An instance of the {@link EthereumProviderError} class.\n   */\n  custom: <T extends OptionalDataWithOptionalCause>(\n    opts: CustomErrorArg<T>,\n  ) => {\n    if (!opts || typeof opts !== 'object' || Array.isArray(opts)) {\n      throw new Error(\n        'Ethereum Provider custom errors must provide single object argument.',\n      );\n    }\n\n    const { code, message, data } = opts;\n\n    if (!message || typeof message !== 'string') {\n      throw new Error('\"message\" must be a nonempty string');\n    }\n    return new EthereumProviderError(code, message, data);\n  },\n};\n\n/**\n * Get a generic JSON-RPC error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link JsonRpcError} class.\n */\nfunction getJsonRpcError<T extends OptionalDataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): JsonRpcError<T> {\n  const [message, data] = parseOpts(arg);\n  return new JsonRpcError(code, message ?? getMessageFromCode(code), data);\n}\n\n/**\n * Get an Ethereum Provider error class instance.\n *\n * @param code - The error code.\n * @param arg - The error message or options bag.\n * @returns An instance of the {@link EthereumProviderError} class.\n */\nfunction getEthProviderError<T extends OptionalDataWithOptionalCause>(\n  code: number,\n  arg?: JsonRpcErrorsArg<T>,\n): EthereumProviderError<T> {\n  const [message, data] = parseOpts(arg);\n  return new EthereumProviderError(\n    code,\n    message ?? getMessageFromCode(code),\n    data,\n  );\n}\n\n/**\n * Get an error message and optional data from an options bag.\n *\n * @param arg - The error message or options bag.\n * @returns A tuple containing the error message and optional data.\n */\nfunction parseOpts<T extends OptionalDataWithOptionalCause>(\n  arg?: JsonRpcErrorsArg<T>,\n): [message?: string | undefined, data?: T | undefined] {\n  if (arg) {\n    if (typeof arg === 'string') {\n      return [arg];\n    } else if (typeof arg === 'object' && !Array.isArray(arg)) {\n      const { message, data } = arg;\n\n      if (message && typeof message !== 'string') {\n        throw new Error('Must specify string message.');\n      }\n      return [message ?? undefined, data];\n    }\n  }\n\n  return [];\n}\n"]}
\ No newline at end of file
diff --git a/dist/utils.d.ts b/dist/utils.d.ts
index f2b6a97b759c7b451c7310813efe92c75a9a9552..7fdec5cf4115e2ea70a2d9129e508519e9593e7e 100644
--- a/dist/utils.d.ts
+++ b/dist/utils.d.ts
@@ -8,8 +8,15 @@ import { Json, JsonRpcError as SerializedJsonRpcError } from '@metamask/utils';
  */
 export type DataWithOptionalCause = Json | {
     [key: string]: Json | unknown;
-    cause: unknown;
+    cause?: unknown;
 };
+/**
+ * A data object, that must be either:
+ *
+ * - A valid DataWithOptionalCause value.
+ * - undefined.
+ */
+export type OptionalDataWithOptionalCause = undefined | DataWithOptionalCause;
 export declare const JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.";
 /**
  * Gets the message for a given code, or a fallback message if the code has
diff --git a/dist/utils.js.map b/dist/utils.js.map
index 88bf91546901530c281d73174775fdefb2068031..9682f83f4bdbb6bd9b64dc8c9e42770da2aaba35 100644
--- a/dist/utils.js.map
+++ b/dist/utils.js.map
@@ -1 +1 @@
-{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  hasProperty,\n  isValidJson,\n  isObject,\n  isJsonRpcError,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n  RuntimeObject,\n} from '@metamask/utils';\n\nimport { errorCodes, errorValues } from './error-constants';\n\n/**\n * A data object, that must be either:\n *\n * - A JSON-serializable object.\n * - An object with a `cause` property that is an error-like value, and any\n * other properties that are JSON-serializable.\n */\nexport type DataWithOptionalCause =\n  | Json\n  | {\n      // Unfortunately we can't use just `Json` here, because all properties of\n      // an object with an index signature must be assignable to the index\n      // signature's type. So we have to use `Json | unknown` instead.\n      [key: string]: Json | unknown;\n      cause: unknown;\n    };\n\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE =\n  'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR: SerializedJsonRpcError = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\n\nexport const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n\ntype ErrorValueKey = keyof typeof errorValues;\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nexport function getMessageFromCode(\n  code: unknown,\n  fallbackMessage: string = FALLBACK_MESSAGE,\n): string {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n\n    if (hasProperty(errorValues, codeString)) {\n      return errorValues[codeString as ErrorValueKey].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nexport function isValidCode(code: unknown): code is number {\n  return Number.isInteger(code);\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nexport function serializeError(\n  error: unknown,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true } = {},\n): SerializedJsonRpcError {\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    );\n  }\n\n  const serialized = buildError(error, fallbackError);\n\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n\n  return serialized;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(\n  error: unknown,\n  fallbackError: SerializedJsonRpcError,\n): SerializedJsonRpcError {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (\n    error &&\n    typeof error === 'object' &&\n    'serialize' in error &&\n    typeof error.serialize === 'function'\n  ) {\n    return error.serialize();\n  }\n\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    data: { cause },\n  };\n\n  return fallbackWithCause;\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code: number): boolean {\n  return code >= -32099 && code <= -32000;\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nexport function serializeCause(error: unknown): Json {\n  if (Array.isArray(error)) {\n    return error.map((entry) => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n\n  if (isValidJson(error)) {\n    return error;\n  }\n\n  return null;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object: RuntimeObject): Json {\n  return Object.getOwnPropertyNames(object).reduce<Record<string, Json>>(\n    (acc, key) => {\n      const value = object[key];\n      if (isValidJson(value)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    {},\n  );\n}\n"]}
\ No newline at end of file
+{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  hasProperty,\n  isValidJson,\n  isObject,\n  isJsonRpcError,\n  Json,\n  JsonRpcError as SerializedJsonRpcError,\n  RuntimeObject,\n} from '@metamask/utils';\n\nimport { errorCodes, errorValues } from './error-constants';\n\n/**\n * A data object, that must be either:\n *\n * - A JSON-serializable object.\n * - An object with a `cause` property that is an error-like value, and any\n * other properties that are JSON-serializable.\n */\nexport type DataWithOptionalCause =\n  | Json\n  | {\n      // Unfortunately we can't use just `Json` here, because all properties of\n      // an object with an index signature must be assignable to the index\n      // signature's type. So we have to use `Json | unknown` instead.\n      [key: string]: Json | unknown;\n      cause?: unknown;\n    };\n\n/**\n * A data object, that must be either:\n *\n * - A valid DataWithOptionalCause value.\n * - undefined.\n */\nexport type OptionalDataWithOptionalCause = undefined | DataWithOptionalCause;\n\nconst FALLBACK_ERROR_CODE = errorCodes.rpc.internal;\nconst FALLBACK_MESSAGE =\n  'Unspecified error message. This is a bug, please report it.';\nconst FALLBACK_ERROR: SerializedJsonRpcError = {\n  code: FALLBACK_ERROR_CODE,\n  message: getMessageFromCode(FALLBACK_ERROR_CODE),\n};\n\nexport const JSON_RPC_SERVER_ERROR_MESSAGE = 'Unspecified server error.';\n\ntype ErrorValueKey = keyof typeof errorValues;\n\n/**\n * Gets the message for a given code, or a fallback message if the code has\n * no corresponding message.\n *\n * @param code - The error code.\n * @param fallbackMessage - The fallback message to use if the code has no\n * corresponding message.\n * @returns The message for the given code, or the fallback message if the code\n * has no corresponding message.\n */\nexport function getMessageFromCode(\n  code: unknown,\n  fallbackMessage: string = FALLBACK_MESSAGE,\n): string {\n  if (isValidCode(code)) {\n    const codeString = code.toString();\n\n    if (hasProperty(errorValues, codeString)) {\n      return errorValues[codeString as ErrorValueKey].message;\n    }\n\n    if (isJsonRpcServerError(code)) {\n      return JSON_RPC_SERVER_ERROR_MESSAGE;\n    }\n  }\n  return fallbackMessage;\n}\n\n/**\n * Returns whether the given code is valid.\n * A code is valid if it is an integer.\n *\n * @param code - The error code.\n * @returns Whether the given code is valid.\n */\nexport function isValidCode(code: unknown): code is number {\n  return Number.isInteger(code);\n}\n\n/**\n * Serializes the given error to an Ethereum JSON RPC-compatible error object.\n * If the given error is not fully compatible, it will be preserved on the\n * returned object's data.cause property.\n *\n * @param error - The error to serialize.\n * @param options - Options bag.\n * @param options.fallbackError - The error to return if the given error is\n * not compatible. Should be a JSON serializable value.\n * @param options.shouldIncludeStack - Whether to include the error's stack\n * on the returned object.\n * @returns The serialized error.\n */\nexport function serializeError(\n  error: unknown,\n  { fallbackError = FALLBACK_ERROR, shouldIncludeStack = true } = {},\n): SerializedJsonRpcError {\n  if (!isJsonRpcError(fallbackError)) {\n    throw new Error(\n      'Must provide fallback error with integer number code and string message.',\n    );\n  }\n\n  const serialized = buildError(error, fallbackError);\n\n  if (!shouldIncludeStack) {\n    delete serialized.stack;\n  }\n\n  return serialized;\n}\n\n/**\n * Construct a JSON-serializable object given an error and a JSON serializable `fallbackError`\n *\n * @param error - The error in question.\n * @param fallbackError - A JSON serializable fallback error.\n * @returns A JSON serializable error object.\n */\nfunction buildError(\n  error: unknown,\n  fallbackError: SerializedJsonRpcError,\n): SerializedJsonRpcError {\n  // If an error specifies a `serialize` function, we call it and return the result.\n  if (\n    error &&\n    typeof error === 'object' &&\n    'serialize' in error &&\n    typeof error.serialize === 'function'\n  ) {\n    return error.serialize();\n  }\n\n  if (isJsonRpcError(error)) {\n    return error;\n  }\n\n  // If the error does not match the JsonRpcError type, use the fallback error, but try to include the original error as `cause`.\n  const cause = serializeCause(error);\n  const fallbackWithCause = {\n    ...fallbackError,\n    data: { cause },\n  };\n\n  return fallbackWithCause;\n}\n\n/**\n * Check if the given code is a valid JSON-RPC server error code.\n *\n * @param code - The error code.\n * @returns Whether the given code is a valid JSON-RPC server error code.\n */\nfunction isJsonRpcServerError(code: number): boolean {\n  return code >= -32099 && code <= -32000;\n}\n\n/**\n * Serializes an unknown error to be used as the `cause` in a fallback error.\n *\n * @param error - The unknown error.\n * @returns A JSON-serializable object containing as much information about the original error as possible.\n */\nexport function serializeCause(error: unknown): Json {\n  if (Array.isArray(error)) {\n    return error.map((entry) => {\n      if (isValidJson(entry)) {\n        return entry;\n      } else if (isObject(entry)) {\n        return serializeObject(entry);\n      }\n      return null;\n    });\n  } else if (isObject(error)) {\n    return serializeObject(error);\n  }\n\n  if (isValidJson(error)) {\n    return error;\n  }\n\n  return null;\n}\n\n/**\n * Extracts all JSON-serializable properties from an object.\n *\n * @param object - The object in question.\n * @returns An object containing all the JSON-serializable properties.\n */\nfunction serializeObject(object: RuntimeObject): Json {\n  return Object.getOwnPropertyNames(object).reduce<Record<string, Json>>(\n    (acc, key) => {\n      const value = object[key];\n      if (isValidJson(value)) {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    {},\n  );\n}\n"]}
\ No newline at end of file
